<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Discrete Events System framework. Requirements.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.09 at 30-Mar-2011</releaseinfo>

	<abstract>
	    <simpara>This document collects use-cases and software requirements for Discrete Events System framework.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>11-Mar-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	    <revision> <revnumber>0.02</revnumber> <date>13-Apr-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added section <xref linkend="sec_obj_spec"/>, requirement <xref linkend="req_log_03"/></revremark> </revision>
	    <revision> <revnumber>0.03</revnumber> <date>20-Apr-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added requirement <xref linkend="req_spc_02"/></revremark> </revision>
	    <revision> <revnumber>0.04</revnumber> <date>21-Apr-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added requirement <xref linkend="req_sta_02"/></revremark> </revision>
	    <revision> <revnumber>0.05</revnumber> <date>21-Apr-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added requirement <xref linkend="req_spc_03"/></revremark> </revision>
	    <revision> <revnumber>0.06</revnumber> <date>07-Oct-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_2_creat_root"/></revremark> </revision>
	    <revision> <revnumber>0.07</revnumber> <date>10-Nov-2010</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_3_ext_inp"/></revremark> </revision>
	    <revision> <revnumber>0.08</revnumber> <date>17-Mar-2011</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="sec_emb_trans"/></revremark> </revision>
	    <revision> <revnumber>0.09</revnumber> <date>30-Mar-2011</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="sec_views"/></revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist>
	<title>References</title>
    </bibliolist>

    
    <sect1 id="sec_gen"> <title>General</title>
	<sect2 id="req_gen_01"><title>FAP_REQ_GEN_01 Creating object from specfication</title>
	    <simpara>Framework shall support creation object from specfication</simpara>
	</sect2>
	<sect2><title>FAP_UC_001 Making changes in the object</title>
	    <simplelist>
		<member>There was a spec for object creation provided.</member>
		<member>Object was created from the spec.</member>
		<member>Some changes get required for the object.</member>
		<member>There is mechanism of making change from dedicated change spec</member>
	    </simplelist>
	</sect2>
	<sect2 id="uc_2_creat_root"><title>FAP_UC_002 Creating env root from the spec</title>
	    <itemizedlist><title>Preconditions</title>
		<listitem>N/A</listitem>
	    </itemizedlist>
	    <itemizedlist><title>Steps</title>
		<listitem>Clien specifies spec for FAP environment</listitem>
		<listitem>Client creates environment with spec</listitem>
	    </itemizedlist>
	    <itemizedlist><title>Result</title>
		<listitem>System creates environment automatically accordig with spec</listitem>
	    </itemizedlist>
	    <itemizedlist><title>Notes</title>
		<listitem>In ver 0.0.1-3 the env is not created automatically but only on "manually" creating
		root from the correspondig node of spec</listitem>
	    </itemizedlist>
	</sect2>
	<sect2 id="uc_3_ext_inp"><title>FAP_UC_003 Creating environment with dynamic number of objects</title>
	    <itemizedlist><title>Preconditions</title>
		<listitem>N/A</listitem>
	    </itemizedlist>
	    <itemizedlist><title>Action</title>
		<listitem>Client creates environment where the number of objects can be dynamic. The objects withis the 
		    environment depends all other objects.</listitem>
		<listitem>Client adds new object and connect all currently existing object wiht new one. </listitem>
	    </itemizedlist>
	    <itemizedlist><title>Reaction</title>
		<listitem>System allows the client to create new connections without using static connections names.</listitem>
	    </itemizedlist>
	    <itemizedlist><title>Notes</title>
		<listitem>This case is quite often in environments with many identical objects that connects all together.</listitem>
	    </itemizedlist>
	</sect2>
	<sect2 id="sec_gen_uc4"><title>FAP_UC_004 USER resets system</title>
	    <simpara>User creates system, runs it and then reset. System goes into initial state.</simpara>
	    <simpara>NOTE: Currently this use-case seems not fully valid because system's chromo can be chanded 
		during the run process (for instance by system's controller). So, no any information of initial state can be presented.
		Seems we need to reconsider the concept of controlling of system that controller initial data should be 
		controlled system's chromo.</simpara>
	</sect2>
    </sect1>

    <sect1><title>States</title>
	<sect2 id = "req_sta_01"><title> FAP_REQ_STA_01 Transition by default </title>
	    <simpara>If no transion function nor operation is specified for the state then there shall the following default transition be done:</simpara>
	    <itemizedlist>
		<listitem>Copying the first input current value if it is compatible to state.</listitem>
	    </itemizedlist>
	    <simpara>NOTE: Earlier one more default transition was used: copying current value of the state to new value. Denied currently.</simpara>
	</sect2>
	<sect2 id="req_sta_02"><title>FAP_REQ_STA_02 Formatting</title>
	    <simpara>State shall include APIs for formatting to string and from string</simpara>
	    <simpara>NOTES: To String formatting is required for logging. 
		From string formatting is required for specifying initial values for the state 
		(ref <xref linkend="req_spc_01"/>)</simpara>
	</sect2>
    </sect1>

    <sect1 id="sec_obj_spec"><title>Object specification</title>
	<sect2><title>General</title>
	    <simpara>Refer to <xref linkend="req_gen_01"/></simpara>
	</sect2>
	<sect2 id="req_spc_01"><title>FAP_REQ_SPC_01 Initial value of state</title>
	    <simpara>There shall be possibility to specify initial value of state in object specification</simpara>
	</sect2>
	<sect2 id="req_spc_02"><title>FAP_REQ_SPC_02 State incapsulaton</title>
	    <simpara>Specification shall describe state with high level of incapsulation.</simpara>
	    <simpara>NOTE: this conforms with approach of representation the system as a set of state machines.</simpara>
	</sect2>
	<sect2 id="req_spc_03"><title>FAP_REQ_SPC_03 State named inputs</title>
	    <simpara>Specification shall describe state's inputs as named entities.</simpara>
	    <simpara>NOTE: This is required for simplifying implementation of transition function (it needs inputs identification) 
		and connections between states.</simpara>
	</sect2>
    </sect1>

    <sect1><title>Logging</title>
	<sect2 id="req_log_01"><title>FAP_REQ_LOG_01 Logging error on construction phase</title>
	    <simpara>Logging shall record errors happend on construction phase</simpara>
	</sect2>
	<sect2 id="req_log_02"><title>FAP_REQ_LOG_02 Log file specifying</title>
	    <simpara>FAP API shall allow requesting the logging into specific log file.</simpara>
	    <simpara>If this is not requested then FAP shall use default log file.</simpara>
	</sect2>
	<sect2 id="req_log_03"><title>FAP_REQ_LOG_03 Logging in transition functions</title>
	    <simpara>Framework shall allow using logging from transition function</simpara>
	</sect2>
	<sect2 id="req_log_04"><title>FAP_REQ_LOG_04 Logging specification</title>
	    <simpara>Framework shall allow to specify logging parameters shall in two ways:</simpara>
	    <itemizedlist>
		<listitem>In object specification (ref <xref linkend="sec_obj_spec"/>)</listitem>
		<listitem>In dedicated logging specification</listitem>
	    </itemizedlist>
	</sect2>
    </sect1>

    <sect1 id="sec_emb_trans"><title>Embedded interpreter of transition function</title>
	<sect2 id="sec_emb_trans_uc_01"><title>FAP_UC_ET_01 Transition can use the accessible modules</title>
	    <simpara>The system defines transition for some state by specifying it within the state. This transition can use the module
	    specifying within the system or super-system. </simpara>
	</sect2>
	<sect2 id="sec_emb_trans_uc_02"><title>FAP_UC_ET_02 User can define functions</title>
	    <simpara>User defines function and then uses it within transition.</simpara>
	</sect2>
	<sect2 id="sec_emb_trans_uc_03"><title>FAP_UC_ET_03 User can define custom data type</title>
	    <simpara>User defines custom data type, and operation for this data type</simpara>
	</sect2>
	<sect2 id="sec_emb_trans_uc_04"><title>FAP_UC_ET_04 User can specify state of custom data type</title>
	    <simpara>User specifies the state of custom data type, ref <xref linkend="sec_emb_trans_uc_03"/></simpara>
	</sect2>
	<sect2 id="sec_emb_trans_uc_05"><title>FAP_UC_ET_05 User can specify new type</title>
	    <simpara>User specifies the new type by specifying the constructor that results in required type.</simpara>
	</sect2>
    </sect1>

    <sect1 id="sec_conn"><title>Connections</title>
	<sect2 id="sec_conn_02"><title>UC_CONN_02 Object has its own input that represent input of some internal state</title>
	    <simpara> It allows to has the unified interface for states and objects. Morover it solves the problem with access to the object.
		All access to the object shall be done via objects connection point.  </simpara> 
	    <simpara>Let's use term "extention" for that. So system connection point is actually an extender. It extends the internal
		connection point</simpara>
	</sect2>
	<sect2 id="sec_conn_03"><title>UC_CONN_03 Connection point can be connected to many connection points</title>
	    <simpara>An example is state output that can be connected to many state inputs. The alternative way could be to have many 
		connection points for output</simpara> 
	</sect2>
	<sect2 id="sec_conn_05"><title>UC_CONN_05 Subsystem connections set can be state of system.</title>
	    <simpara>System controls the structure of subsystem (connections set, transition function). The structure
		is represented as state - it can be connected to other states, thus the change of structure will cause the activation
		of dependent states</simpara>
	</sect2>
	<sect2 id="sec_conn_06"><title>UC_CONN_06 USER removes internal sub-system, SYSTEM disextend connection points of subsystem</title>
	    <itemizedlist>
		<listitem>Initial conditions: There is system with internal subsystem; system has extention that
		extend connection point of this subsystem.</listitem>
	    <listitem>USER request removing internal subsystem</listitem>
	    <listitem>SYSTEM automatically disextend extention from subsystem</listitem>
	    <listitem>SYSTEM removes systems's subsystem as component.</listitem>
	    </itemizedlist>
	</sect2>
    </sect1>

    <sect1 id="sec_views"><title>Views</title>
	<sect2 id="sec_views_01"><title>FAP_UC_VW_01 User specifies view for interpreter.</title>
	    <simpara>User runs DES interpreter and specifies how many views should be created and what type they shoud be of.</simpara>
	</sect2>
	<sect2 id="sec_views_02"><title>FAP_UC_VW_02 Client application creates view and adds it to DES interpreter</title>
	</sect2>
	<sect2 id="sec_views_06"><title>FAP_UC_VW_06 User specifies base view and see the systems spec</title>
	    <simpara>User specify that the view of type "base". System displays it's specification in graphic notation.</simpara>
	    <simpara>System displays the following on the base view: inputs, outputs, transitions, states, components</simpara>
	</sect2>
	<sect2 id="sec_views_03"><title>FAP_UC_VW_03 System shows the DES objects as hierarchy in base view</title>
	    <simpara>User specify view and the system set this view as a view of root DES object.  </simpara>
	</sect2>
	<sect2 id="sec_views_04"><title>FAP_UC_VW_04 User selects different level of detalisation in view.</title>
	    <simpara>System displays the view as a graphical hierarchy. User selects of full or compact form of view.
		The full form shows inputs, outputs, components (in compact form), and connections. 
		The compact form shows only inputs and outputs of object.</simpara>
	</sect2>
	<sect2 id="sec_views_05"><title>FAP_UC_VW_05 User changes base view and saves - system stores view data and uses it next time.</title>
	</sect2>
	<sect2 id="sec_views_07"><title>FAP_UC_VW_07 User can act to view</title>
	    <simpara>User acts on view. The system reacts on this and change the view properly.</simpara>
	</sect2>
	<sect2 id="sec_views_09"><title>FAP_UC_VW_09 User taps on connection id</title>
	    <simpara>User taps on connecion id - system higlight connection id and all corresponding connection ids</simpara>
	</sect2>
	<sect2 id="sec_views_10"><title>FAP_UC_VW_10 USER selects system with state - SYSTEM displays state, showing state elements</title>
	    <simpara>The following elemensts are displayed: name, type, trans, init, inputs. Name and type are displayed
	    in header of state.</simpara>
	</sect2>
	<sect2 id="sec_views_11"><title>FAP_UC_VW_11 USER selects system with sub-systems - SYSTEM displays sub-systems, showing its elements</title>
	    <simpara>The following elemensts are displayed: name, parent, inputs, outputs. Name and parent are displayed
	    in the header of system.</simpara>
	</sect2>
	<sect2 id="sec_views_12"><title>FAP_UC_VW_12 USER taps on name in subsystem - SYSTEM displays sub-system view</title>
	</sect2>
	<sect2 id="sec_views_13"><title>FAP_UC_VW_13 USER taps on parent in subsystem - SYSTEM displays parent view</title>
	</sect2>
	<sect2 id="sec_views_14"><title>FAP_UC_VW_14 SYSTEM allows to open new view in current or new window</title>
	</sect2>
	<sect2 id="sec_views_15"><title>FAP_UC_VW_15 SYSTEM allows USER to navigate thru root hierarhy</title>
	    <simpara>SYSTEM (for instance Client Application) is initialized by some element within system hierarhy. SYSTEM
		considers this element as a root. SYSTEM allows USER navigation thru hierarhy below this root. </simpara>
	    <simpara>SYSTEM moves down on USER selects sub-system within current system. SYSTEM moves up on USER selects
		moving to parent (from menu or toolbar).</simpara>
	</sect2>
	<sect2 id="sec_views_16"><title>FAP_UC_VW_16 SYSTEM allows USER to navigate thru the history</title>
	</sect2>
	<sect2 id="sec_views_17"><title>FAP_UC_VW_17 SYSTEM can filter the connections showing only local of them</title>
	</sect2>
	<sect2 id="sec_views_18"><title>FAP_UC_VW_18 USER adds new component</title>
	    <simpara>New component has no parent and becomes some initial name. USER can create more new components, 
		the names of components are generated uniquely.</simpara>
	</sect2>
	<sect2 id="sec_views_19"><title>FAP_UC_VW_19 USER changes the name of component</title>
	</sect2>
	<sect2 id="sec_views_20"><title>FAP_UC_VW_20 USER changes the name of system</title>
	</sect2>
	<sect2 id="sec_views_21"><title>FAP_UC_VW_21 USER adds new state</title>
	    <simpara>New component has of default type and becomes some initial name. USER can create more new states, 
		the names of them are generated uniquely.</simpara>
	</sect2>
	<sect2 id="sec_views_22"><title>FAP_UC_VW_22 USER removes a state.</title>
	    <simpara>All connection from/to this state are deleted correspondingly</simpara>
	</sect2>
	<sect2 id="sec_views_23"><title>FAP_UC_VW_23 USER selects type of state.</title>
	</sect2>
	<sect2 id="sec_views_24"><title>FAP_UC_VW_24 USER adds inputs to state.</title>
	</sect2>
	<sect2 id="sec_views_25"><title>FAP_UC_VW_25 USER renames input of state.</title>
	</sect2>
	<sect2 id="sec_views_26"><title>FAP_UC_VW_26 USER changes transition of state.</title>
	</sect2>
	<sect2 id="sec_views_27"><title>FAP_UC_VW_27 USER adds connection</title>
	    <simpara>The connection is added between connection points (not to extender)</simpara>
	</sect2>
	<sect2 id="sec_views_28"><title>FAP_UC_VW_28 USER removes connection</title>
	</sect2>
	<sect2 id="sec_views_29"><title>FAP_UC_VW_29 USER changes transtition of system.</title>
	</sect2>

    </sect1>
    <sect1 id="sec_studio"><title>Studio application</title>
	<sect2 id="sec_studio_01"><title>FAP_UC_ST_01 USER creates new project</title>
	    <simpara>STUDIO initially manage DES environment, that provides system ticks. 
		STUDIO also provides some predefined projects template. One of them is default template with empty root only.  </simpara>
	    <simpara>USER asks STUDIO to create new project. STUDIO displays to user the list of projects templates available. USER
		selects the proper template. STUDIO creates the new project from the template.
	    </simpara>
	</sect2>
	<sect2 id="sec_studio_02"><title>FAP_UC_ST_02 USER saves the system specification.</title>
	</sect2>
	<sect2 id="sec_studio_03"><title>FAP_UC_ST_03 USER opens system spec from file on local filesystem.</title>
	    <simpara>STUDIO initially manages DES environment, that provides system ticks (creates root system).  </simpara>
	    <simpara>USER asks STUDIO to open system spec stored as the file on local file system. 
		STUDIO allows USER to select file on filesystem, create system from the spec and add it to the root.  </simpara>
	</sect2>
    </sect1>

    <sect1 id="sec_vizmo"><title>DES Visualization module (DESVM)</title>
	<sect2 id="sec_vizmo_01"><title>FAP_UC_VM_01 USER creates new project and add Visualization Module to it.</title>
	    <simpara>USER then can create his own regular DES module, the sybsystem within that module can access to DESVM 
	    subsystems, create theys heirs and connect to it in order to visualize</simpara>
	</sect2>
    </sect1>

</article>
