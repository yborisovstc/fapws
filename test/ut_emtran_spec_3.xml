<?xml version="1.0" ?>

<!-- Specification of FAP environment for unit test for embedded transition -->
<!--
     This test checks the states of user defined data type
     The model is the rock that is being throwing with initial velocity, than it flies, and breaks
     -->

<!DOCTYPE  caeenv SYSTEM "/home/yborisov/projects/fap/git/fapws/src/objspec.dtd"> 

<caeenv>
    <iobject type="none" id="main_test">
	<mut node="self">
	    <add>
		<out id="rock">
		    <src id="coord"/> <src id="mass"/> 
		</out>

		<logspec event="tran"> <logdata id="trex"/></logspec> 

		<trans> 
		    let Point x y :: Struct Float Float := Struct (X::Float Y::Float) x y
		    let Point x y :: Struct - - := Struct (X::Float Y::Float) Float x Float y
		    let cc1 :: Point := Point 4.0 6.0
		    let cc2 :: Point := 5.0 7.0
		    let PtX x :: Float Point := Fld x X
		    let PtY x :: Float Point := Fld x Y
		    let add x y :: Point Point Point := Point (add PtX x PtX y) (add PtY x PtY y)
		    let Vector x y :: Struct Float Float := Struct (X::Float Y::Float) x y
		    let Vector x y :: Struct - - := Struct (X::Float Y::Float) Float x Float y
		    let Vector x :: Struct Struct := x
		    let vc1 :: Vector := Vector 4.0 6.0
		    let vc2 :: Vector := 5.0 7.0
		    let KVect0 :: Vector := 0.0 0.0
		    let VectX x :: Float Vector := Fld x X
		    let VectY x :: Float Vector := Fld x Y
		    let vc1x :: Float := VectX vc1
		    let vc1y :: Float := VectY vc1
		    let add x y :: Vector Vector Vector := Vector add VectX x VectX y add VectY x VectY y
		    let atst :: Vector := add vc1 vc2
		    let KAccDef :: Vector := 0.0 -8.9
		    let cp1 :: TBool := lt VectY vc1 0.0
		</trans>
		<!-- Not working! let var1 :: Vector := if bang add KVect0  KAccDef KVect0  -->
		<!-- That is because add evaluated with "*" req type -->

		<iobject type="none" id="Rock" quiet="yes"> 
		    <mut node="self">
			<add>
			    <out id="coord"/>
			    <out id="mass"/>
			    <out id="outp"> <src id="coord"/> <src id="mass"/> </out>

			    <logspec  event="cre"> <logdata id="new"/> </logspec>

			    <state type="Float" id="mass" init="2.0"> 
				<logspec event="upd"> <logdata id="new"/> </logspec> 
			    </state>

			    <state type="Vector" id="coord" init="0.0 1.0"> 
				<logspec event="upd"> <logdata id="cur"/> <logdata id="new"/> </logspec> 
				<logspec event="tran"> <logdata id="trex"/></logspec> 
				<inp id="self"/> <inp id="velocity"/> 
				<trans> 
				    let coord :: Vector := add inp self inp velocity
				    let bang :: TBool := le VectY coord 0.0
				    if bang KVect0 coord
				</trans>
			    </state>

			    <state type="Vector" id="velocity" init="80.0 80.0"> 
				<logspec event="upd"> <logdata id="cur"/> <logdata id="new"/> </logspec> 
				<logspec event="tran"> <logdata id="trex"/></logspec> 
				<inp id="self"/><inp id="coord"/> 
				<trans> 
				    let bang :: TBool := le VectY inp coord 0.0
				    let vel :: Vector := add inp self KAccDef
				    if bang KVect0 vel
				</trans>
			    </state>

			    <conn id="coord.self" pair="coord.output"/> 
			    <conn id="coord.velocity" pair="velocity.output"/> 
			    <conn id="velocity.coord" pair="coord.output"/> 
			    <conn id="velocity.self" pair="velocity.output"/> 

			    <ext id="coord" pair="coord.output"/>
			    <ext id="mass" pair="mass.output"/>

			</add>
		    </mut>

		</iobject> <!-- Rock -->

		<iobject type="Rock" id="rock_1" > <mut node="self"> <change type="state" id="mass" attr="init" val="7"/> </mut>  </iobject>

		<extc id="rock"> <srcext id="coord" pair="rock_1.coord"/> <srcext id="mass" pair="rock_1.mass"/> </extc>

	    </add>
	</mut>
    </iobject> <!-- test -->
</caeenv>

